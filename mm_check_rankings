#! /usr/bin/python3

import re
import sys
import xml.etree.ElementTree as ET
import unicodedata
import unidecode


def load_mm():
    tree = ET.parse(sys.stdin)
    return tree

class PolishRanking:
    def __init__(self):
        self.players = []


    @staticmethod
    def convert_rankname(rankname):
        mapping = {'dan': 'd', 'd': 'd', 'pro': 'p', 'p': 'p', 'kyu': 'k', 'k': 'k'}
        return mapping[rankname]


    def get_players_ranklist(self):
        with open("lista_psg_h_utf8.htm", "r", encoding="utf8") as rankfile:
            player_pattern = re.compile(r'\|\s*\d+\s*\|\s+(?P<surname>[^\s]+)\s+(?P<firstname>[^\s]+)\s+(?P<rank>\d+)(?P<rankname>\w+)\s+\|\s+(?P<city>[^|]+)\|.*key=(?P<pin>\d+)\'')
            for line in rankfile:
                match = player_pattern.match(line)
#                print(match, file=sys.stderr)
                if match:
                    name = "%s %s" % (match.group("firstname").strip(), match.group("surname").strip())
                    ascii_name = unidecode.unidecode(name)
                    #print(name)
                    self.players.append((ascii_name,
                        name,
                        "%s%s" % (match.group("rank").strip(),
                                  self.convert_rankname(match.group("rankname").strip())),
                        match.group("city").strip(),
                        int(match.group("pin"))))
#       print(self.players)


    def find_player(self, name):
        ascii = list(filter(lambda el: el[0] == name, self.players))
        if len(ascii) > 0:
            return ascii
        unicode = list(filter(lambda el: el[1] == name, self.players))
        return unicode

    def find_by_pin(self, pin):
        m = list(filter(lambda el: el[4] == pin, self.players))
        if len(m) > 0:
            return m[0]
        return None


ranking = PolishRanking()
ranking.get_players_ranklist()

t = load_mm()
root = t.getroot()
for entry in t.findall('IndividualParticipant'):
    player = entry.find('GoPlayer')
    country_node = player.find('Country')
    if country_node == None or country_node.text != 'pl':
        continue
    name = "%s %s" % (player.find('FirstName').text, player.find('Surname').text)
    m = ranking.find_by_pin(int(player.find('EgdPin').text))
    if not m:
        matches = ranking.find_player(name)
        if len(matches) == 0:
            print('No match found for: %s' % name)
            continue
        if len(matches) == 1:
            m = matches[0]
        if len(matches) > 1:
            print("Not implemented - more then 1 match")
    mm_rank = player.find('GoLevel').text
    if mm_rank != m[2]:
        print("Player %s (%s) has rank %s on list" % (name, mm_rank, m[2]))
#    else:
#        print("OK: %s - %s" % (name, mm_rank))

